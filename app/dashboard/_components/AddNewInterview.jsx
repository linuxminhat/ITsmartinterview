"use client";
import React, { useState, useMemo, useEffect } from "react";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { chatSession, startInteractiveInterview } from "@/utils/GeminiAIModal";
import { LoaderCircle, Sparkles } from "lucide-react";
import { MockInterview } from "@/utils/schema";
import { v4 as uuidv4 } from 'uuid';
import { db } from "@/utils/db";
import { useUser } from "@clerk/nextjs";
import moment from "moment";
import { useRouter } from "next/navigation";
import { toast } from "sonner";

// Job Role Suggestions
const JOB_ROLE_SUGGESTIONS = [
  'L·∫≠p tr√¨nh vi√™n Fullstack',
  'L·∫≠p tr√¨nh vi√™n Frontend',
  'L·∫≠p tr√¨nh vi√™n Backend',
  'L·∫≠p tr√¨nh vi√™n .NET',
  'L·∫≠p tr√¨nh vi√™n Java core',
  'L·∫≠p tr√¨nh vi√™n Python',
  'L·∫≠p tr√¨nh vi√™n PHP',
  'Kƒ© s∆∞ ph·∫ßn m·ªÅm',
  'Kƒ© s∆∞ DevOps',
  'Kƒ© s∆∞ Data',
  'Kƒ© s∆∞ Machine Learning',
  'Kƒ© s∆∞ Cloud',
  'Kƒ© s∆∞ Mobile',
  'Nh√† thi·∫øt k·∫ø UI/UX',
  'Nh·∫≠p m√¥n l·∫≠p tr√¨nh',
  'Ph·ªèng v·∫•n Java FPT'
];

// Tech Stack Suggestions
const TECH_STACK_SUGGESTIONS = {
  'L·∫≠p tr√¨nh vi√™n Fullstack ': 'HTML5 / CSS3 / JavaScript (ES6+), Front-end framework / library (React, Vue ho·∫∑c Angular), Back-end runtime & framework (Node.js + Express/NestJS), C∆° s·ªü d·ªØ li·ªáu & ORM (PostgreSQL ho·∫∑c MongoDB + Prisma/TypeORM), Version Control & DevOps (Git, Docker, CI/CD tr√™n AWS/Azure/GCP)',
  'L·∫≠p tr√¨nh vi√™n Frontend': 'HTML5 / CSS3 / JavaScript (ES6+), Frontend Framework/Library (React.js / Vue.js / Angular), CSS-in-JS ho·∫∑c CSS Frameworks (Tailwind CSS, SCSS, Styled-components), State Management (Redux, Zustand, Vuex, Context API), Tooling & Build Tools (Vite / Webpack / Babel / ESLint / Prettier)',
  'L·∫≠p tr√¨nh vi√™n Backend': 'H·ªèi v·ªÅ concept ng√¥n ng·ªØ l·∫≠p tr√¨nh backend (kh√¥ng s√¢u ng√¥n ng·ªØ), H·ªèi v·ªÅ concept C∆° s·ªü d·ªØ li·ªáu (Database), h·ªèi v·ªÅ concept API Design & Communication, h·ªèi v·ªÅ concept DevOps c∆° b·∫£n & Deployment, h·ªèi v·ªÅ concept ',
  'L·∫≠p tr√¨nh vi√™n .NET': 'C#, .NET, ASP.NET, Entity Framework, LINQ, ASP.NET MVC, ASP.NET Web API, ASP.NET Core, SQL Server, MySQL, PostgreSQL, MongoDB, Redis, Docker, Kubernetes, Azure, AWS, GCP',
  'L·∫≠p tr√¨nh vi√™n Java core': 'Java, Spring, Hibernate, JPA, JDBC, JSP, Servlet, JSTL, JUnit, Mockito, Maven, Gradle, Git, Docker, Kubernetes, AWS, Azure, GCP',
  'L·∫≠p tr√¨nh vi√™n Python': 'Python, Django, Flask, FastAPI, SQLAlchemy, Pandas, NumPy, Scikit-learn, Keras, TensorFlow, PyTorch, Docker, Kubernetes, AWS, Azure, GCP',
  'L·∫≠p tr√¨nh vi√™n PHP': 'PHP, Laravel, CodeIgniter, Symfony, Yii, CakePHP, Zend, Composer, Git, Docker, Kubernetes, AWS, Azure, GCP',
  'Kƒ© s∆∞ ph·∫ßn m·ªÅm': 'H·ªèi v·ªÅ concept ng√¥n ng·ªØ l·∫≠p tr√¨nh (kh√¥ng s√¢u ng√¥n ng·ªØ), H·ªèi v·ªÅ concept OOP, H·ªèi v·ªÅ concept Design Pattern, H·ªèi v·ªÅ concept Database, H·ªèi v·ªÅ concept API Design & Communication, H·ªèi v·ªÅ concept DevOps c∆° b·∫£n & Deployment',
  'Kƒ© s∆∞ DevOps': 'Docker, Kubernetes, Jenkins, AWS, Azure, GCP, Terraform, Ansible, Puppet, Chef, Shell Scripting, CI/CD, Git, GitLab, GitHub, GitLab CI/CD, GitLab CI/CD Pipeline, GitLab CI/CD Jobs, GitLab CI/CD Triggers, GitLab CI/CD Variables, GitLab CI/CD Jobs, GitLab CI/CD Triggers, GitLab CI/CD Variables',
  'Kƒ© s∆∞ Data': 'H·ªèi v·ªÅ concept Database, H·ªèi v·ªÅ concept API Design & Communication, H·ªèi v·ªÅ concept DevOps c∆° b·∫£n & Deployment',
  'Kƒ© s∆∞ Machine Learning': 'H·ªèi v·ªÅ concept ng√¥n ng·ªØ l·∫≠p tr√¨nh (kh√¥ng s√¢u ng√¥n ng·ªØ), H·ªèi v·ªÅ concept OOP, H·ªèi v·ªÅ concept Design Pattern, H·ªèi v·ªÅ concept Database, H·ªèi v·ªÅ concept API Design & Communication, H·ªèi v·ªÅ concept DevOps c∆° b·∫£n & Deployment',
  'Kƒ© s∆∞ Cloud': 'AWS, Azure, GCP, Terraform, Kubernetes',
  'Kƒ© s∆∞ Mobile': 'React Native, Flutter, Swift, Kotlin',
  'Nh√† thi·∫øt k·∫ø UI/UX': 'Figma, Sketch, Adobe XD, InVision',
  'Nh·∫≠p m√¥n l·∫≠p tr√¨nh': 'H·ªèi c∆° b·∫£n v·ªÅ bi·∫øn, v√≤ng l·∫∑p, m·∫£ng ',
  'Ph·ªèng v·∫•n Java FPT': 'Java, OOP, C√°c kh√°i ni·ªám c∆° b·∫£n c·ªßa Java, C·∫•u tr√∫c d·ªØ li·ªáu, Spring Framework, v√† ki·∫øn th·ª©c c·ªët l√µi c·ªßa Java'
};

function AddNewInterview() {
  const [openDialog, setOpenDialog] = useState(false);
  const [jobPosition, setJobPosition] = useState("");
  const [jobDescription, setJobDescription] = useState("");
  const [jobExperience, setJobExperience] = useState("");
  const [loading, setLoading] = useState(false);
  const { user } = useUser();
  const router = useRouter();

  // Auto-suggest tech stack based on job role
  const autoSuggestTechStack = (role) => {
    const suggestion = TECH_STACK_SUGGESTIONS[role];
    if (suggestion) {
      setJobDescription(suggestion);
      toast.info(`Auto-filled tech stack for ${role}`);
    }
  };

  const onSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);

    // X·ª≠ l√Ω ƒë·∫∑c bi·ªát cho Ph·ªèng v·∫•n Java FPT
    if (jobPosition === "Ph·ªèng v·∫•n Java FPT") {
      try {
        // T·∫°o 5 c√¢u h·ªèi c·ªë ƒë·ªãnh cho Ph·ªèng v·∫•n Java FPT
        const javaFPTQuestions = [
          {
            "difficulty": 1,
            "question": "Gi·∫£i th√≠ch l·∫≠p tr√¨nh h∆∞·ªõng ƒë·ªëi t∆∞·ª£ng (OOP) v√† c√°c nguy√™n t·∫Øc c∆° b·∫£n."
          },
          {
            "difficulty": 2,
            "question": "C√°c l·ªõp wrapper trong Java l√† g√¨?"
          },
          {
            "difficulty": 3,
            "question": "T·ª´ kh√≥a \"static\" trong Java?"
          },
          {
            "difficulty": 4,
            "question": "T·∫°i sao kh√¥ng s·ª≠ d·ª•ng con tr·ªè trong Java?"
          },
          {
            "difficulty": 5,
            "question": "Java c√≥ h·ªó tr·ª£ ƒëa k·∫ø th·ª´a (multiple inheritance) kh√¥ng? N·∫øu kh√¥ng, t·∫°i sao?"
          }
        ];

        // L∆∞u v√†o database
        const res = await db.insert(MockInterview)
          .values({
            mockId: uuidv4(),
            jsonMockResp: JSON.stringify(javaFPTQuestions),
            jobPosition: jobPosition,
            jobDesc: jobDescription,
            jobExperience: jobExperience,
            createdBy: user?.primaryEmailAddress?.emailAddress,
            createdAt: moment().format('DD-MM-YYYY'),
          }).returning({ mockId: MockInterview.mockId });

        toast.success('C√°c c√¢u h·ªèi ph·ªèng v·∫•n Java FPT ƒë√£ ƒë∆∞·ª£c t·∫°o!');
        router.push(`dashboard/interview/${res[0]?.mockId}`);

      } catch (error) {
        console.error("L·ªói khi t·∫°o ph·ªèng v·∫•n Java FPT:", error);
        toast.error('Kh√¥ng t·∫°o ƒë∆∞·ª£c c√¢u h·ªèi ph·ªèng v·∫•n.');
      } finally {
        setLoading(false);
      }
      return;
    }

    const inputPrompt = `
V·ªã tr√≠ c√¥ng vi·ªác: ${jobPosition}
M√¥ t·∫£ c√¥ng vi·ªác chi ti·∫øt: ${jobDescription}
S·ªë nƒÉm kinh nghi·ªám ·ª©ng vi√™n: ${jobExperience}

T√¥i c·∫ßn **5 c√¢u h·ªèi ph·ªèng v·∫•n k·ªπ thu·∫≠t chuy√™n s√¢u**, v·ªõi ƒë·ªô kh√≥ tƒÉng d·∫ßn **nh∆∞ng T·∫§T C·∫¢ ph·∫£i ph√π h·ª£p v·ªõi s·ªë nƒÉm kinh nghi·ªám ·ªü tr√™n**.

### Quy t·∫Øc kinh nghi·ªám
- **< 1 nƒÉm** ‚Üí ki·ªÉm tra ki·∫øn th·ª©c r·∫•t c∆° b·∫£n (syntax, CSDL ƒë∆°n gi·∫£n, kh√°i ni·ªám OOP‚Ä¶).
- **2‚Äì3 nƒÉm** ‚Üí ki·ªÉm tra kinh nghi·ªám d·ª± √°n v·ª´a, debug, best-practice, t·ªëi ∆∞u nh·ªè.
- **4‚Äì5 nƒÉm** ‚Üí t·∫≠p trung thi·∫øt k·∫ø h·ªá th·ªëng, hi·ªáu nƒÉng, refactor, review code.
- **> 5 nƒÉm** ‚Üí ki·∫øn tr√∫c, scalability, chi·∫øn l∆∞·ª£c b·∫£o tr√¨, quy·∫øt ƒë·ªãnh c√¥ng ngh·ªá.

üëâ N·∫øu ·ª©ng vi√™n n·∫±m trong d·∫£i **n** nƒÉm, h√£y vi·∫øt 5 c√¢u h·ªèi c√≥ ƒë·ªô kh√≥ ‚òÖ1 ‚Üí ‚òÖ5, **ƒë·ªÅu n·∫±m trong ch√≠nh d·∫£i ƒë√≥**  
(v√≠ d·ª• ·ª©ng vi√™n 2 nƒÉm ‚Üí c·∫£ 5 c√¢u h·ªèi ·ªü m·ª©c 2‚Äì3 nƒÉm, t·ª´ c∆° b·∫£n ‚Üí n√¢ng cao).

### ƒê·ªãnh d·∫°ng tr·∫£ v·ªÅ *(ch·ªâ JSON, kh√¥ng gi·∫£i th√≠ch)*
[
  { "difficulty": 1, "question": "..." },
  { "difficulty": 2, "question": "..." },
  { "difficulty": 3, "question": "..." },
  { "difficulty": 4, "question": "..." },
  { "difficulty": 5, "question": "..." }
]
`;

    try {
      const result = await chatSession.sendMessage(inputPrompt);
      const responseText = await result.response.text();

      const cleanedResponse = responseText.replace(/```json\n?|```/g, '').trim();

      const mockResponse = JSON.parse(cleanedResponse);

      const res = await db.insert(MockInterview)
        .values({
          mockId: uuidv4(),
          jsonMockResp: JSON.stringify(mockResponse),
          jobPosition: jobPosition,
          jobDesc: jobDescription,
          jobExperience: jobExperience,
          createdBy: user?.primaryEmailAddress?.emailAddress,
          createdAt: moment().format('DD-MM-YYYY'),
        }).returning({ mockId: MockInterview.mockId });

      toast.success('C√°c c√¢u h·ªèi ph·ªèng v·∫•n ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!');
      router.push(`dashboard/interview/${res[0]?.mockId}`);
    } catch (error) {
      console.error("L·ªói khi t·∫°o ph·ªèng v·∫•n:", error);
      toast.error('Kh√¥ng t·∫°o ƒë∆∞·ª£c c√¢u h·ªèi ph·ªèng v·∫•n.');
    } finally {
      setLoading(false);
    }
  };

  return (
    <div>
      <div
        className="p-10 border rounded-lg bg-secondary hover:scale-105 hover:shadow-md cursor-pointer transition-all"
        onClick={() => setOpenDialog(true)}
      >
        <h1 className="font-bold text-lg text-center">+ Th√™m m·ªõi</h1>
      </div>
      <Dialog open={openDialog} onOpenChange={setOpenDialog}>
        <DialogContent className="max-w-2xl">
          <DialogHeader>
            <DialogTitle className="font-bold text-2xl">
              Chu·∫©n b·ªã cho bu·ªïi ph·ªèng v·∫•n c·ªßa b·∫°n
            </DialogTitle>
          </DialogHeader>
          <DialogDescription>
            <form onSubmit={onSubmit}>
              <div>
                <div className="mt-7 my-3">
                  <label>Ch·ª©c v·ª•/V·ªã tr√≠ c√¥ng vi·ªác</label>
                  <div className="flex items-center space-x-2">
                    <Input
                      placeholder="Ex. Full Stack Developer"
                      value={jobPosition}
                      required
                      onChange={(e) => setJobPosition(e.target.value)}
                      list="jobRoles"
                    />
                    <datalist id="jobRoles">
                      {JOB_ROLE_SUGGESTIONS.map(role => (
                        <option key={role} value={role} />
                      ))}
                    </datalist>
                    <Button
                      type="button"
                      variant="ghost"
                      size="icon"
                      onClick={() => autoSuggestTechStack(jobPosition)}
                      disabled={!jobPosition}
                    >
                      <Sparkles className="h-4 w-4" />
                    </Button>
                  </div>
                </div>
                <div className="my-3">
                  <label>M√¥ t·∫£ c√¥ng vi·ªác/C√¥ng ngh·ªá s·ª≠ d·ª•ng</label>
                  <Textarea
                    placeholder="V√≠ d·ª•  :  React, Angular, NodeJs, MySql etc"
                    value={jobDescription}
                    required
                    onChange={(e) => setJobDescription(e.target.value)}
                  />
                </div>
                <div className="my-3">
                  <label>S·ªë nƒÉm kinh nghi·ªám</label>
                  <Input
                    placeholder="Ex. 5"
                    type="number"
                    min="0"
                    max="70"
                    value={jobExperience}
                    required
                    onChange={(e) => setJobExperience(e.target.value)}
                  />
                </div>
              </div>
              <div className="flex gap-5 justify-end">
                <Button type="button" variant="ghost" onClick={() => setOpenDialog(false)}>
                  H·ªßy b·ªè
                </Button>
                <Button type="submit" disabled={loading}>
                  {loading ? (
                    <>
                      <LoaderCircle className="animate-spin mr-2" /> T·∫°o ra
                    </>
                  ) : (
                    'B·∫Øt ƒë·∫ßu ph·ªèng v·∫•n'
                  )}
                </Button>
              </div>
            </form>
          </DialogDescription>
        </DialogContent>
      </Dialog>
    </div>
  );
}

export default AddNewInterview;